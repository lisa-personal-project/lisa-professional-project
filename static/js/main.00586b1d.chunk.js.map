{"version":3,"sources":["static/Manifeste-agile.jpg","static/dev.jpg","static/langage.jpg","static/diplome.jpg","static/raw.jpg","components/Card.js","components/Card2.js","components/Card3.js","components/Card4.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardAgile","props","React","useState","cardOne","setCardOne","Card","style","maxWidth","maxHeight","minHeight","CardActionArea","CardMedia","height","image","img","title","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","onClick","console","log","injectSheet","styles","checked","setChecked","className","width","display","flexDirection","flexWrap","justifyContent","alignItems","alignContent","fontSize","fontWeigth","Slide","direction","in","mountOnEnter","unmountOnExit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00586b1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Manifeste-agile.9fd47512.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dev.f0233cc7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/langage.40023bef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/diplome.0d926ed8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/raw.a945d858.jpg\";","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport img from \"../static/Manifeste-agile.jpg\";\r\n\r\nconst CardAgile = props => {\r\n    const [cardOne, setCardOne] = React.useState(false);\r\n    const handleChangeCardOne = () => {\r\n        console.log(cardOne);\r\n        setCardOne(!cardOne);\r\n    };\r\n    return (\r\n        <Card style={{ maxWidth: 345, maxHeight: 345, minHeight: 335 }}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    style={{ height: 145 }}\r\n                    image={img}\r\n                    title=\"Manifest agile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        Manifeste agile\r\n</Typography>\r\n                    {!props.cardOne ? <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        The twelve rules at the begining of all agile managment methode\r\n</Typography> :\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Nous suivons ces principes:\r\n                            Notre plus haute priorité est de satisfaire le client\r\n                            en livrant rapidement et régulièrement des fonctionnalités\r\n                            à grande valeur ajoutée.\r\n\r\n                            Accueillez positivement les changements de besoins,\r\n                            même tard dans le projet. Les processus Agiles\r\n                            exploitent le changement pour donner un avantage\r\n                            compétitif au client.\r\n\r\n                            Livrez fréquemment un logiciel opérationnel avec des\r\n                            cycles de quelques semaines à quelques mois et une\r\n                            préférence pour les plus courts.\r\n\r\n                            Les utilisateurs ou leurs représentants et les\r\n                            développeurs doivent travailler ensemble quotidiennement\r\n                            tout au long du projet.\r\n\r\n                            Réalisez les projets avec des personnes motivées.\r\n                            Fournissez-leur l’environnement et le soutien dont ils\r\n                            ont besoin et faites-leur confiance pour atteindre les\r\n                            objectifs fixés.\r\n\r\n                            La méthode la plus simple et la plus efficace pour\r\n                            transmettre de l’information à l'équipe de développement\r\n                            et à l’intérieur de celle-ci est le dialogue en face à face.\r\n\r\n                            Un logiciel opérationnel est la principale mesure d’avancement.\r\n\r\n                            Les processus Agiles encouragent un rythme de développement\r\n                            soutenable. Ensemble, les commanditaires, les développeurs\r\n                            et les utilisateurs devraient être capables de maintenir\r\n                            indéfiniment un rythme constant.\r\n\r\n                            Une attention continue à l'excellence technique et\r\n                            à une bonne conception renforce l’Agilité.\r\n\r\n                            La simplicité – c’est-à-dire l’art de minimiser la\r\n                            quantité de travail inutile – est essentielle.\r\n\r\n                            Les meilleures architectures, spécifications et\r\n                            conceptions émergent d'équipes autoorganisées.\r\n\r\n                            À intervalles réguliers, l'équipe réfléchit aux moyens\r\n                            de devenir plus efficace, puis règle et modifie son\r\n                            comportement en conséquence.\r\n\r\n\r\n</Typography>}\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n\r\n                <Button size=\"small\" color=\"primary\" onClick={() => handleChangeCardOne()}>\r\n                    Learn More\r\n</Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default CardAgile;\r\n","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport img from \"../static/dev.jpg\";\r\n\r\nconst CardAgile = props => {\r\n    const [cardOne, setCardOne] = React.useState(false);\r\n    const handleChangeCardOne = () => {\r\n        console.log(cardOne);\r\n        setCardOne(!cardOne);\r\n    };\r\n    return (\r\n        <Card style={{ maxWidth: 345, maxHeight: 345 }}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    style={{ height: 145 }}\r\n                    image={img}\r\n                    title=\"Manifest agile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Les missions du developpeur/euse\r\n</Typography>\r\n                    {!props.cardOne ? <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        The twelve rules at the begining of all agile managment methode\r\n</Typography> :\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Nous suivons ces principes:\r\n                            Notre plus haute priorité est de satisfaire le client\r\n                            en livrant rapidement et régulièrement des fonctionnalités\r\n                            à grande valeur ajoutée.\r\n\r\n                            Accueillez positivement les changements de besoins,\r\n                            même tard dans le projet. Les processus Agiles\r\n                            exploitent le changement pour donner un avantage\r\n                            compétitif au client.\r\n\r\n                            Livrez fréquemment un logiciel opérationnel avec des\r\n                            cycles de quelques semaines à quelques mois et une\r\n                            préférence pour les plus courts.\r\n\r\n                            Les utilisateurs ou leurs représentants et les\r\n                            développeurs doivent travailler ensemble quotidiennement\r\n                            tout au long du projet.\r\n\r\n                            Réalisez les projets avec des personnes motivées.\r\n                            Fournissez-leur l’environnement et le soutien dont ils\r\n                            ont besoin et faites-leur confiance pour atteindre les\r\n                            objectifs fixés.\r\n\r\n                            La méthode la plus simple et la plus efficace pour\r\n                            transmettre de l’information à l'équipe de développement\r\n                            et à l’intérieur de celle-ci est le dialogue en face à face.\r\n\r\n                            Un logiciel opérationnel est la principale mesure d’avancement.\r\n\r\n                            Les processus Agiles encouragent un rythme de développement\r\n                            soutenable. Ensemble, les commanditaires, les développeurs\r\n                            et les utilisateurs devraient être capables de maintenir\r\n                            indéfiniment un rythme constant.\r\n\r\n                            Une attention continue à l'excellence technique et\r\n                            à une bonne conception renforce l’Agilité.\r\n\r\n                            La simplicité – c’est-à-dire l’art de minimiser la\r\n                            quantité de travail inutile – est essentielle.\r\n\r\n                            Les meilleures architectures, spécifications et\r\n                            conceptions émergent d'équipes autoorganisées.\r\n\r\n                            À intervalles réguliers, l'équipe réfléchit aux moyens\r\n                            de devenir plus efficace, puis règle et modifie son\r\n                            comportement en conséquence.\r\n\r\n\r\n</Typography>}\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n\r\n                <Button size=\"small\" color=\"primary\" onClick={() => handleChangeCardOne()}>\r\n                    Learn More\r\n</Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default CardAgile;\r\n","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport img from \"../static/langage.jpg\";\r\n\r\nconst CardAgile = props => {\r\n    const [cardOne, setCardOne] = React.useState(false);\r\n    const handleChangeCardOne = () => {\r\n        console.log(cardOne);\r\n        setCardOne(!cardOne);\r\n    };\r\n    return (\r\n        <Card style={{ maxWidth: 345, maxHeight: 345 }}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    style={{ height: 145 }}\r\n                    image={img}\r\n                    title=\"Manifest agile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Les principaux langages du web d'aujourd'hui\r\n</Typography>\r\n                    {!props.cardOne ? <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        The twelve rules at the begining of all agile managment methode\r\n</Typography> :\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Nous suivons ces principes:\r\n                            Notre plus haute priorité est de satisfaire le client\r\n                            en livrant rapidement et régulièrement des fonctionnalités\r\n                            à grande valeur ajoutée.\r\n\r\n                            Accueillez positivement les changements de besoins,\r\n                            même tard dans le projet. Les processus Agiles\r\n                            exploitent le changement pour donner un avantage\r\n                            compétitif au client.\r\n\r\n                            Livrez fréquemment un logiciel opérationnel avec des\r\n                            cycles de quelques semaines à quelques mois et une\r\n                            préférence pour les plus courts.\r\n\r\n                            Les utilisateurs ou leurs représentants et les\r\n                            développeurs doivent travailler ensemble quotidiennement\r\n                            tout au long du projet.\r\n\r\n                            Réalisez les projets avec des personnes motivées.\r\n                            Fournissez-leur l’environnement et le soutien dont ils\r\n                            ont besoin et faites-leur confiance pour atteindre les\r\n                            objectifs fixés.\r\n\r\n                            La méthode la plus simple et la plus efficace pour\r\n                            transmettre de l’information à l'équipe de développement\r\n                            et à l’intérieur de celle-ci est le dialogue en face à face.\r\n\r\n                            Un logiciel opérationnel est la principale mesure d’avancement.\r\n\r\n                            Les processus Agiles encouragent un rythme de développement\r\n                            soutenable. Ensemble, les commanditaires, les développeurs\r\n                            et les utilisateurs devraient être capables de maintenir\r\n                            indéfiniment un rythme constant.\r\n\r\n                            Une attention continue à l'excellence technique et\r\n                            à une bonne conception renforce l’Agilité.\r\n\r\n                            La simplicité – c’est-à-dire l’art de minimiser la\r\n                            quantité de travail inutile – est essentielle.\r\n\r\n                            Les meilleures architectures, spécifications et\r\n                            conceptions émergent d'équipes autoorganisées.\r\n\r\n                            À intervalles réguliers, l'équipe réfléchit aux moyens\r\n                            de devenir plus efficace, puis règle et modifie son\r\n                            comportement en conséquence.\r\n\r\n\r\n</Typography>}\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n\r\n                <Button size=\"small\" color=\"primary\" onClick={() => handleChangeCardOne()}>\r\n                    Learn More\r\n</Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default CardAgile;\r\n","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport img from \"../static/diplome.jpg\";\r\n\r\nconst CardAgile = props => {\r\n    const [cardOne, setCardOne] = React.useState(false);\r\n    const handleChangeCardOne = () => {\r\n        console.log(cardOne);\r\n        setCardOne(!cardOne);\r\n    };\r\n    return (\r\n        <Card style={{ maxWidth: 345, maxHeight: 345 }}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    style={{ height: 145 }}\r\n                    image={img}\r\n                    title=\"Manifest agile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Les differents diplome et formation certifiante\r\n</Typography>\r\n                    {!props.cardOne ? <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        The twelve rules at the begining of all agile managment methode\r\n</Typography> :\r\n\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Nous suivons ces principes:\r\n                            Notre plus haute priorité est de satisfaire le client\r\n                            en livrant rapidement et régulièrement des fonctionnalités\r\n                            à grande valeur ajoutée.\r\n\r\n                            Accueillez positivement les changements de besoins,\r\n                            même tard dans le projet. Les processus Agiles\r\n                            exploitent le changement pour donner un avantage\r\n                            compétitif au client.\r\n\r\n                            Livrez fréquemment un logiciel opérationnel avec des\r\n                            cycles de quelques semaines à quelques mois et une\r\n                            préférence pour les plus courts.\r\n\r\n                            Les utilisateurs ou leurs représentants et les\r\n                            développeurs doivent travailler ensemble quotidiennement\r\n                            tout au long du projet.\r\n\r\n                            Réalisez les projets avec des personnes motivées.\r\n                            Fournissez-leur l’environnement et le soutien dont ils\r\n                            ont besoin et faites-leur confiance pour atteindre les\r\n                            objectifs fixés.\r\n\r\n                            La méthode la plus simple et la plus efficace pour\r\n                            transmettre de l’information à l'équipe de développement\r\n                            et à l’intérieur de celle-ci est le dialogue en face à face.\r\n\r\n                            Un logiciel opérationnel est la principale mesure d’avancement.\r\n\r\n                            Les processus Agiles encouragent un rythme de développement\r\n                            soutenable. Ensemble, les commanditaires, les développeurs\r\n                            et les utilisateurs devraient être capables de maintenir\r\n                            indéfiniment un rythme constant.\r\n\r\n                            Une attention continue à l'excellence technique et\r\n                            à une bonne conception renforce l’Agilité.\r\n\r\n                            La simplicité – c’est-à-dire l’art de minimiser la\r\n                            quantité de travail inutile – est essentielle.\r\n\r\n                            Les meilleures architectures, spécifications et\r\n                            conceptions émergent d'équipes autoorganisées.\r\n\r\n                            À intervalles réguliers, l'équipe réfléchit aux moyens\r\n                            de devenir plus efficace, puis règle et modifie son\r\n                            comportement en conséquence.\r\n\r\n\r\n</Typography>}\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n\r\n                <Button size=\"small\" color=\"primary\" onClick={() => handleChangeCardOne()}>\r\n                    Learn More\r\n</Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default CardAgile;\r\n","import React from 'react';\r\nimport injectSheet from \"react-jss\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport logo from './static/raw.jpg';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport styles from './App.css';\r\nimport CardOne from './components/Card';\r\n\r\nimport CardTwo from './components/Card2';\r\nimport CardThree from './components/Card3';\r\nimport CardFour from './components/Card4';\r\n\r\nfunction App() {\r\n  const [checked, setChecked] = React.useState(false);\r\n  const handleChange = () => {\r\n    console.log(checked);\r\n    setChecked(!checked);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"App\">{!checked ?\r\n      <Button style={{\r\n        width: \"100vw\", height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        flexWrap: \"nowrap\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        alignContent: \"stretch\",\r\n      }} onClick={() => handleChange()}>\r\n        <div className=\"App-header\" style={{\r\n          display: \"flex !important\",\r\n          flexDirection: \"column !important\",\r\n          flexWrap: \"nowrap\",\r\n          justifyContent: \"space-around\",\r\n          alignItems: \"center\",\r\n          alignContent: \"stretch\"\r\n        }}>\r\n\r\n          <div>\r\n            <div style={{ width: \"100vw\", height: \"80vh\", fontSize: 80, fontWeigth: 700, color: \"white\" }}> DEVELOPPEUR WEB</div>\r\n            <div>\r\n              Click here\r\n\r\n            </div>\r\n            <ExpandMoreIcon style={{ color: \"white\" }} />\r\n          </div>\r\n        </div>\r\n      </Button> : <></>} <Slide direction=\"up\" in={checked} mountOnEnter unmountOnExit>\r\n\r\n        <div style={{\r\n          width: \"100vw\", height: \"100vh\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          flexWrap: \"nowrap\",\r\n          justifyContent: \"space-around\",\r\n          alignItems: \"center\",\r\n          alignContent: \"stretch\"\r\n        }}>\r\n          <div style={{    width:\"100%\",display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    alignContent: \"stretch\"}}>\r\n\r\n         <CardOne />\r\n         \r\n         <CardTwo />\r\n         \r\n         <CardThree />\r\n         \r\n         <CardFour />\r\n          </div>\r\n        </div>\r\n\r\n      </Slide>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default injectSheet(styles)(App);\r\n\r\n\r\n\r\n/**\r\n *  <div style={{ flexGrow: 1 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} style={{ width: \"70vw\", height: \"20vh\" }}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                backgroundColor: \"#282c34\"\r\n              }}>DEVELOPPER WER</div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                backgroundColor: \"#282c34\"\r\n              }}>xs=6</div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                backgroundColor: \"#282c34\"\r\n              }}>xs=6</div>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                backgroundColor: \"#282c34\"\r\n              }}>xs=3</div>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                backgroundColor: \"#282c34\"\r\n              }}>xs=3</div>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                backgroundColor: \"#282c34\"\r\n              }}>xs=3</div>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <div className={{\r\n                padding: \"theme.spacing(2)\",\r\n                color: \"#282c34\"\r\n              }}>xs=3</div>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n */","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}